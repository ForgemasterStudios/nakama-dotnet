/* Code generated by codegen/main.go. DO NOT EDIT. */
namespace Nakama.Console
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// An exception generated for <c>HttpResponse</c> objects don't return a success status.
    /// </summary>
    public sealed class ApiResponseException : Exception
    {
        public long StatusCode { get; }

        public int GrpcStatusCode { get; }

        public ApiResponseException(long statusCode, string content, int grpcCode) : base(content)
        {
            StatusCode = statusCode;
            GrpcStatusCode = grpcCode;
        }

        public ApiResponseException(string message, Exception e) : base(message, e)
        {
            StatusCode = -1L;
            GrpcStatusCode = -1;
        }

        public ApiResponseException(string content) : this(-1L, content, -1)
        {
        }

        public override string ToString()
        {
            return $"ApiResponseException(StatusCode={StatusCode}, Message='{Message}', GrpcStatusCode={GrpcStatusCode})";
        }
    }

    /// <summary>
    /// A warning for a configuration field.
    /// </summary>
    public interface IConfigWarning
    {

        /// <summary>
        /// The config field this warning is for in a JSON pointer format.
        /// </summary>
        string Field { get; }

        /// <summary>
        /// Warning message text.
        /// </summary>
        string Message { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConfigWarning : IConfigWarning
    {

        /// <inheritdoc />
        [DataMember(Name="field"), Preserve]
        public string Field { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message"), Preserve]
        public string Message { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Field: ", Field, ", ");
            output = string.Concat(output, "Message: ", Message, ", ");
            return output;
        }
    }

    /// <summary>
    /// Module information
    /// </summary>
    public interface IRuntimeInfoModuleInfo
    {

        /// <summary>
        /// Module last modified date
        /// </summary>
        string ModTime { get; }

        /// <summary>
        /// Module path
        /// </summary>
        string Path { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class RuntimeInfoModuleInfo : IRuntimeInfoModuleInfo
    {

        /// <inheritdoc />
        [DataMember(Name="mod_time"), Preserve]
        public string ModTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="path"), Preserve]
        public string Path { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ModTime: ", ModTime, ", ");
            output = string.Concat(output, "Path: ", Path, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single group-role pair.
    /// </summary>
    public interface IUserGroupListUserGroup
    {

        /// <summary>
        /// Group.
        /// </summary>
        IApiGroup Group { get; }

        /// <summary>
        /// The user's relationship to the group.
        /// </summary>
        int State { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class UserGroupListUserGroup : IUserGroupListUserGroup
    {

        /// <inheritdoc />
        public IApiGroup Group => _group;
        [DataMember(Name="group"), Preserve]
        public ApiGroup _group { get; set; }

        /// <inheritdoc />
        [DataMember(Name="state"), Preserve]
        public int State { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Group: ", Group, ", ");
            output = string.Concat(output, "State: ", State, ", ");
            return output;
        }
    }

    /// <summary>
    /// Environment where the purchase took place
    /// </summary>
    public enum ValidatedPurchaseEnvironment
    {
        /// <summary>
        /// - UNKNOWN: Unknown environment.
        /// </summary>
        UNKNOWN = 0,
        /// <summary>
        ///  - SANDBOX: Sandbox/test environment.
        /// </summary>
        SANDBOX = 1,
        /// <summary>
        ///  - PRODUCTION: Production environment.
        /// </summary>
        PRODUCTION = 2,
    }

    /// <summary>
    /// Validation Provider
    /// </summary>
    public enum ValidatedPurchaseStore
    {
        /// <summary>
        /// - APPLE_APP_STORE: Apple App Store
        /// </summary>
        APPLE_APP_STORE = 0,
        /// <summary>
        ///  - GOOGLE_PLAY_STORE: Google Play Store
        /// </summary>
        GOOGLE_PLAY_STORE = 1,
        /// <summary>
        ///  - HUAWEI_APP_GALLERY: Huawei App Gallery
        /// </summary>
        HUAWEI_APP_GALLERY = 2,
    }

    /// <summary>
    /// Send a device to the server. Used with authenticate/link/unlink and user.
    /// </summary>
    public interface IApiAccountDevice
    {

        /// <summary>
        /// A device identifier. Should be obtained by a platform-specific device API.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Extra information that will be bundled in the session token.
        /// </summary>
        IDictionary<string, string> Vars { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiAccountDevice : IApiAccountDevice
    {

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        public IDictionary<string, string> Vars => _vars ?? new Dictionary<string, string>();
        [DataMember(Name="vars"), Preserve]
        public Dictionary<string, string> _vars { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Id: ", Id, ", ");

            var mapString = "";
            foreach (var kvp in Vars)
            {
                mapString = string.Concat(mapString, "{" + kvp.Key + "=" + kvp.Value + "}");
            }
            output = string.Concat(output, "Vars: [" + mapString + "]");
            return output;
        }
    }

    /// <summary>
    /// A message sent on a channel.
    /// </summary>
    public interface IApiChannelMessage
    {

        /// <summary>
        /// The channel this message belongs to.
        /// </summary>
        string ChannelId { get; }

        /// <summary>
        /// The code representing a message type or category.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// The content payload.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the message was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The ID of the group, or an empty string if this message was not sent through a group channel.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// The unique ID of this message.
        /// </summary>
        string MessageId { get; }

        /// <summary>
        /// True if the message was persisted to the channel's history, false otherwise.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// The name of the chat room, or an empty string if this message was not sent through a chat room.
        /// </summary>
        string RoomName { get; }

        /// <summary>
        /// Message sender, usually a user ID.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// The UNIX time when the message was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
        /// </summary>
        string UserIdOne { get; }

        /// <summary>
        /// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
        /// </summary>
        string UserIdTwo { get; }

        /// <summary>
        /// The username of the message sender, if any.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiChannelMessage : IApiChannelMessage
    {

        /// <inheritdoc />
        [DataMember(Name="channel_id"), Preserve]
        public string ChannelId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public int Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="content"), Preserve]
        public string Content { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="group_id"), Preserve]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="message_id"), Preserve]
        public string MessageId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="persistent"), Preserve]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="room_name"), Preserve]
        public string RoomName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sender_id"), Preserve]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id_one"), Preserve]
        public string UserIdOne { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id_two"), Preserve]
        public string UserIdTwo { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "ChannelId: ", ChannelId, ", ");
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Content: ", Content, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "GroupId: ", GroupId, ", ");
            output = string.Concat(output, "MessageId: ", MessageId, ", ");
            output = string.Concat(output, "Persistent: ", Persistent, ", ");
            output = string.Concat(output, "RoomName: ", RoomName, ", ");
            output = string.Concat(output, "SenderId: ", SenderId, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserIdOne: ", UserIdOne, ", ");
            output = string.Concat(output, "UserIdTwo: ", UserIdTwo, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A friend of a user.
    /// </summary>
    public interface IApiFriend
    {

        /// <summary>
        /// The friend status.
        /// </summary>
        int State { get; }

        /// <summary>
        /// Time of the latest relationship update.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        INakamaapiUser User { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiFriend : IApiFriend
    {

        /// <inheritdoc />
        [DataMember(Name="state"), Preserve]
        public int State { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        public INakamaapiUser User => _user;
        [DataMember(Name="user"), Preserve]
        public NakamaapiUser _user { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "State: ", State, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more friends of the user.
    /// </summary>
    public interface IApiFriendList
    {

        /// <summary>
        /// Cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The Friend objects.
        /// </summary>
        IEnumerable<IApiFriend> Friends { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiFriendList : IApiFriendList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiFriend> Friends => _friends ?? new List<ApiFriend>(0);
        [DataMember(Name="friends"), Preserve]
        public List<ApiFriend> _friends { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "Friends: [", string.Join(", ", Friends), "], ");
            return output;
        }
    }

    /// <summary>
    /// A group in the server.
    /// </summary>
    public interface IApiGroup
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the group was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The id of the user who created the group.
        /// </summary>
        string CreatorId { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The current count of all members in the group.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The id of a group.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The maximum number of members allowed.
        /// </summary>
        int MaxCount { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The unique name of the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Anyone can join open groups, otherwise only admins can accept members.
        /// </summary>
        bool Open { get; }

        /// <summary>
        /// The UNIX time when the group was last updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiGroup : IApiGroup
    {

        /// <inheritdoc />
        [DataMember(Name="avatar_url"), Preserve]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="creator_id"), Preserve]
        public string CreatorId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="description"), Preserve]
        public string Description { get; set; }

        /// <inheritdoc />
        [DataMember(Name="edge_count"), Preserve]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lang_tag"), Preserve]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_count"), Preserve]
        public int MaxCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="open"), Preserve]
        public bool Open { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "CreatorId: ", CreatorId, ", ");
            output = string.Concat(output, "Description: ", Description, ", ");
            output = string.Concat(output, "EdgeCount: ", EdgeCount, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "LangTag: ", LangTag, ", ");
            output = string.Concat(output, "MaxCount: ", MaxCount, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "Open: ", Open, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// Represents a complete leaderboard record with all scores and associated metadata.
    /// </summary>
    public interface IApiLeaderboardRecord
    {

        /// <summary>
        /// The UNIX time when the leaderboard record was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record expires.
        /// </summary>
        string ExpiryTime { get; }

        /// <summary>
        /// The ID of the leaderboard this score belongs to.
        /// </summary>
        string LeaderboardId { get; }

        /// <summary>
        /// The maximum number of score updates allowed by the owner.
        /// </summary>
        int MaxNumScore { get; }

        /// <summary>
        /// Metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The number of submissions to this score record.
        /// </summary>
        int NumScore { get; }

        /// <summary>
        /// The ID of the score owner, usually a user or group.
        /// </summary>
        string OwnerId { get; }

        /// <summary>
        /// The rank of this record.
        /// </summary>
        string Rank { get; }

        /// <summary>
        /// The score value.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional subscore value.
        /// </summary>
        string Subscore { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record was updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the score owner, if the owner is a user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiLeaderboardRecord : IApiLeaderboardRecord
    {

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="expiry_time"), Preserve]
        public string ExpiryTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="leaderboard_id"), Preserve]
        public string LeaderboardId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="max_num_score"), Preserve]
        public int MaxNumScore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata"), Preserve]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="num_score"), Preserve]
        public int NumScore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="owner_id"), Preserve]
        public string OwnerId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="rank"), Preserve]
        public string Rank { get; set; }

        /// <inheritdoc />
        [DataMember(Name="score"), Preserve]
        public string Score { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subscore"), Preserve]
        public string Subscore { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "ExpiryTime: ", ExpiryTime, ", ");
            output = string.Concat(output, "LeaderboardId: ", LeaderboardId, ", ");
            output = string.Concat(output, "MaxNumScore: ", MaxNumScore, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "NumScore: ", NumScore, ", ");
            output = string.Concat(output, "OwnerId: ", OwnerId, ", ");
            output = string.Concat(output, "Rank: ", Rank, ", ");
            output = string.Concat(output, "Score: ", Score, ", ");
            output = string.Concat(output, "Subscore: ", Subscore, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
    /// </summary>
    public interface IApiLeaderboardRecordList
    {

        /// <summary>
        /// The cursor to send when retrieving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// A batched set of leaderboard records belonging to specified owners.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> OwnerRecords { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }

        /// <summary>
        /// A list of leaderboard records.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> Records { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiLeaderboardRecordList : IApiLeaderboardRecordList
    {

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> OwnerRecords => _ownerRecords ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="owner_records"), Preserve]
        public List<ApiLeaderboardRecord> _ownerRecords { get; set; }

        /// <inheritdoc />
        [DataMember(Name="prev_cursor"), Preserve]
        public string PrevCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> Records => _records ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="records"), Preserve]
        public List<ApiLeaderboardRecord> _records { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "OwnerRecords: [", string.Join(", ", OwnerRecords), "], ");
            output = string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            output = string.Concat(output, "Records: [", string.Join(", ", Records), "], ");
            return output;
        }
    }

    /// <summary>
    /// Represents a realtime match.
    /// </summary>
    public interface INakamaapiMatch
    {
        /// <summary>
        /// True if it's an server-managed authoritative match, false otherwise.
        /// </summary>
        bool Authoritative { get; }

        /// <summary>
        /// Handler name
        /// </summary>
        string HandlerName { get; }

        /// <summary>
        /// Match label, if any.
        /// </summary>
        string Label { get; }

        /// <summary>
        /// The ID of the match, can be used to join.
        /// </summary>
        string MatchId { get; }

        /// <summary>
        /// Current number of users in the match.
        /// </summary>
        int Size { get; }

        /// <summary>
        /// Tick Rate
        /// </summary>
        int TickRate { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class NakamaapiMatch : INakamaapiMatch
    {
        /// <inheritdoc />
        [DataMember(Name="authoritative"), Preserve]
        public bool Authoritative { get; set; }

        /// <inheritdoc />
        [DataMember(Name="handler_name"), Preserve]
        public string HandlerName { get; set; }

        /// <inheritdoc />
        [DataMember(Name="label"), Preserve]
        public string Label { get; set; }

        /// <inheritdoc />
        [DataMember(Name="match_id"), Preserve]
        public string MatchId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="size"), Preserve]
        public int Size { get; set; }

        /// <inheritdoc />
        [DataMember(Name="tick_rate"), Preserve]
        public int TickRate { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Authoritative: ", Authoritative, ", ");
            output = string.Concat(output, "HandlerName: ", HandlerName, ", ");
            output = string.Concat(output, "Label: ", Label, ", ");
            output = string.Concat(output, "MatchId: ", MatchId, ", ");
            output = string.Concat(output, "Size: ", Size, ", ");
            output = string.Concat(output, "TickRate: ", TickRate, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of realtime matches.
    /// </summary>
    public interface IApiMatchList
    {
        /// <summary>
        /// A number of matches corresponding to a list operation.
        /// </summary>
        IEnumerable<INakamaapiMatch> Matches { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiMatchList : IApiMatchList
    {

        /// <inheritdoc />
        public IEnumerable<INakamaapiMatch> Matches => _matches ?? new List<NakamaapiMatch>(0);
        [DataMember(Name="matches"), Preserve]
        public List<NakamaapiMatch> _matches { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Matches: [", string.Join(", ", Matches), "], ");
            return output;
        }
    }

    /// <summary>
    /// A notification in the server.
    /// </summary>
    public interface IApiNotification
    {

        /// <summary>
        /// Category code for this notification.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// Content of the notification in JSON.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the notification was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// ID of the Notification.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// True if this notification was persisted to the database.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// ID of the sender, if a user. Otherwise 'null'.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// Subject of the notification.
        /// </summary>
        string Subject { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiNotification : IApiNotification
    {

        /// <inheritdoc />
        [DataMember(Name="code"), Preserve]
        public int Code { get; set; }

        /// <inheritdoc />
        [DataMember(Name="content"), Preserve]
        public string Content { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="persistent"), Preserve]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [DataMember(Name="sender_id"), Preserve]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="subject"), Preserve]
        public string Subject { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Code: ", Code, ", ");
            output = string.Concat(output, "Content: ", Content, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Persistent: ", Persistent, ", ");
            output = string.Concat(output, "SenderId: ", SenderId, ", ");
            output = string.Concat(output, "Subject: ", Subject, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of validated purchases stored by Nakama.
    /// </summary>
    public interface IApiPurchaseList
    {

        /// <summary>
        /// The cursor to send when retrieving the next page, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// Stored validated purchases.
        /// </summary>
        IEnumerable<IApiValidatedPurchase> ValidatedPurchases { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiPurchaseList : IApiPurchaseList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiValidatedPurchase> ValidatedPurchases => _validatedPurchases ?? new List<ApiValidatedPurchase>(0);
        [DataMember(Name="validated_purchases"), Preserve]
        public List<ApiValidatedPurchase> _validatedPurchases { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "ValidatedPurchases: [", string.Join(", ", ValidatedPurchases), "], ");
            return output;
        }
    }

    /// <summary>
    /// An object within the storage engine.
    /// </summary>
    public interface IApiStorageObject
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The UNIX time when the object was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The UNIX time when the object was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiStorageObject : IApiStorageObject
    {

        /// <inheritdoc />
        [DataMember(Name="collection"), Preserve]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key"), Preserve]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_read"), Preserve]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [DataMember(Name="permission_write"), Preserve]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id"), Preserve]
        public string UserId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="value"), Preserve]
        public string Value { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version"), Preserve]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "PermissionRead: ", PermissionRead, ", ");
            output = string.Concat(output, "PermissionWrite: ", PermissionWrite, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            output = string.Concat(output, "Value: ", Value, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// A storage acknowledgement.
    /// </summary>
    public interface IApiStorageObjectAck
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiStorageObjectAck : IApiStorageObjectAck
    {

        /// <inheritdoc />
        [DataMember(Name="collection"), Preserve]
        public string Collection { get; set; }

        /// <inheritdoc />
        [DataMember(Name="key"), Preserve]
        public string Key { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id"), Preserve]
        public string UserId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="version"), Preserve]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collection: ", Collection, ", ");
            output = string.Concat(output, "Key: ", Key, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            output = string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of groups belonging to a user, along with the user's role in each group.
    /// </summary>
    public interface IApiUserGroupList
    {

        /// <summary>
        /// Cursor for the next page of results, if any.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// Group-role pairs for a user.
        /// </summary>
        IEnumerable<IUserGroupListUserGroup> UserGroups { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiUserGroupList : IApiUserGroupList
    {

        /// <inheritdoc />
        [DataMember(Name="cursor"), Preserve]
        public string Cursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IUserGroupListUserGroup> UserGroups => _userGroups ?? new List<UserGroupListUserGroup>(0);
        [DataMember(Name="user_groups"), Preserve]
        public List<UserGroupListUserGroup> _userGroups { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Cursor: ", Cursor, ", ");
            output = string.Concat(output, "UserGroups: [", string.Join(", ", UserGroups), "], ");
            return output;
        }
    }

    /// <summary>
    /// Validated Purchase stored by Nakama.
    /// </summary>
    public interface IApiValidatedPurchase
    {

        /// <summary>
        /// UNIX Timestamp when the receipt validation was stored in DB.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// Whether the purchase was done in production or sandbox environment.
        /// </summary>
        ValidatedPurchaseEnvironment Environment { get; }

        /// <summary>
        /// Purchase Product ID.
        /// </summary>
        string ProductId { get; }

        /// <summary>
        /// Raw provider validation response.
        /// </summary>
        string ProviderResponse { get; }

        /// <summary>
        /// UNIX Timestamp when the purchase was done.
        /// </summary>
        string PurchaseTime { get; }

        /// <summary>
        /// Store identifier
        /// </summary>
        ValidatedPurchaseStore Store { get; }

        /// <summary>
        /// Purchase Transaction ID.
        /// </summary>
        string TransactionId { get; }

        /// <summary>
        /// UNIX Timestamp when the receipt validation was updated in DB.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ApiValidatedPurchase : IApiValidatedPurchase
    {

        /// <inheritdoc />
        [DataMember(Name="create_time"), Preserve]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        public ValidatedPurchaseEnvironment Environment => _environment;
        [DataMember(Name="environment"), Preserve]
        public ValidatedPurchaseEnvironment _environment { get; set; }

        /// <inheritdoc />
        [DataMember(Name="product_id"), Preserve]
        public string ProductId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="provider_response"), Preserve]
        public string ProviderResponse { get; set; }

        /// <inheritdoc />
        [DataMember(Name="purchase_time"), Preserve]
        public string PurchaseTime { get; set; }

        /// <inheritdoc />
        public ValidatedPurchaseStore Store => _store;
        [DataMember(Name="store"), Preserve]
        public ValidatedPurchaseStore _store { get; set; }

        /// <inheritdoc />
        [DataMember(Name="transaction_id"), Preserve]
        public string TransactionId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time"), Preserve]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Environment: ", Environment, ", ");
            output = string.Concat(output, "ProductId: ", ProductId, ", ");
            output = string.Concat(output, "ProviderResponse: ", ProviderResponse, ", ");
            output = string.Concat(output, "PurchaseTime: ", PurchaseTime, ", ");
            output = string.Concat(output, "Store: ", Store, ", ");
            output = string.Concat(output, "TransactionId: ", TransactionId, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }
    
    /// <summary>
    /// A user with additional account details. Always the current user.
    /// </summary>
    public interface INakamaapiAccount
    {

        /// <summary>
        /// The custom id in the user's account.
        /// </summary>
        string CustomId { get; }

        /// <summary>
        /// The devices which belong to the user's account.
        /// </summary>
        IEnumerable<IApiAccountDevice> Devices { get; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }

        /// <summary>
        /// The UNIX time when the user's email was verified.
        /// </summary>
        string VerifyTime { get; }

        /// <summary>
        /// The user's wallet data.
        /// </summary>
        string Wallet { get; }
    }

    /// <inheritdoc />
    internal class NakamaapiAccount : INakamaapiAccount
    {

        /// <inheritdoc />
        [DataMember(Name="custom_id")]
        public string CustomId { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiAccountDevice> Devices => _devices ?? new List<ApiAccountDevice>(0);
        [DataMember(Name="devices")]
        public List<ApiAccountDevice> _devices { get; set; }

        /// <inheritdoc />
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <inheritdoc />
        public IApiUser User => _user;
        [DataMember(Name="user")]
        public ApiUser _user { get; set; }

        /// <inheritdoc />
        [DataMember(Name="verify_time")]
        public string VerifyTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="wallet")]
        public string Wallet { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "CustomId: ", CustomId, ", ");
            output = string.Concat(output, "Devices: [", string.Join(", ", Devices), "], ");
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "User: ", User, ", ");
            output = string.Concat(output, "VerifyTime: ", VerifyTime, ", ");
            output = string.Concat(output, "Wallet: ", Wallet, ", ");
            return output;
        }
    }

    /// <summary>
    /// An individual update to a user's wallet.
    /// </summary>
    public interface IConsoleWalletLedger
    {

        /// <summary>
        /// The changeset.
        /// </summary>
        string Changeset { get; }

        /// <summary>
        /// The UNIX time when the wallet ledger item was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The identifier of this wallet change.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// Any associated metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The UNIX time when the wallet ledger item was updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user ID this wallet ledger item belongs to.
        /// </summary>
        string UserId { get; }
    }

    /// <inheritdoc />
    internal class ConsoleWalletLedger : IConsoleWalletLedger
    {

        /// <inheritdoc />
        [DataMember(Name="changeset")]
        public string Changeset { get; set; }

        /// <inheritdoc />
        [DataMember(Name="create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [DataMember(Name="metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [DataMember(Name="update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id")]
        public string UserId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Changeset: ", Changeset, ", ");
            output = string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            output = string.Concat(output, "Metadata: ", Metadata, ", ");
            output = string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            return output;
        }
    }

    /// <summary>
    /// An export of all information stored for a user account.
    /// </summary>
    public interface IConsoleAccountExport
    {

        /// <summary>
        /// The user's account details.
        /// </summary>
        INakamaapiAccount Account { get; }

        /// <summary>
        /// The user's friends.
        /// </summary>
        IEnumerable<IApiFriend> Friends { get; }

        /// <summary>
        /// The user's groups.
        /// </summary>
        IEnumerable<IApiGroup> Groups { get; }

        /// <summary>
        /// The user's leaderboard records.
        /// </summary>
        IEnumerable<IApiLeaderboardRecord> LeaderboardRecords { get; }

        /// <summary>
        /// The user's chat messages.
        /// </summary>
        IEnumerable<IApiChannelMessage> Messages { get; }

        /// <summary>
        /// The user's notifications.
        /// </summary>
        IEnumerable<IApiNotification> Notifications { get; }

        /// <summary>
        /// The user's storage.
        /// </summary>
        IEnumerable<IApiStorageObject> Objects { get; }

        /// <summary>
        /// The user's wallet ledger items.
        /// </summary>
        IEnumerable<IConsoleWalletLedger> WalletLedgers { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleAccountExport : IConsoleAccountExport
    {

        /// <inheritdoc />
        public INakamaapiAccount Account => _account;
        [DataMember(Name="account"), Preserve]
        public NakamaapiAccount _account { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiFriend> Friends => _friends ?? new List<ApiFriend>(0);
        [DataMember(Name="friends"), Preserve]
        public List<ApiFriend> _friends { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiGroup> Groups => _groups ?? new List<ApiGroup>(0);
        [DataMember(Name="groups"), Preserve]
        public List<ApiGroup> _groups { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiLeaderboardRecord> LeaderboardRecords => _leaderboardRecords ?? new List<ApiLeaderboardRecord>(0);
        [DataMember(Name="leaderboard_records"), Preserve]
        public List<ApiLeaderboardRecord> _leaderboardRecords { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiChannelMessage> Messages => _messages ?? new List<ApiChannelMessage>(0);
        [DataMember(Name="messages"), Preserve]
        public List<ApiChannelMessage> _messages { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiNotification> Notifications => _notifications ?? new List<ApiNotification>(0);
        [DataMember(Name="notifications"), Preserve]
        public List<ApiNotification> _notifications { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiStorageObject> Objects => _objects ?? new List<ApiStorageObject>(0);
        [DataMember(Name="objects"), Preserve]
        public List<ApiStorageObject> _objects { get; set; }

        /// <inheritdoc />
        public IEnumerable<IConsoleWalletLedger> WalletLedgers => _walletLedgers ?? new List<ConsoleWalletLedger>(0);
        [DataMember(Name="wallet_ledgers"), Preserve]
        public List<ConsoleWalletLedger> _walletLedgers { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Account: ", Account, ", ");
            output = string.Concat(output, "Friends: [", string.Join(", ", Friends), "], ");
            output = string.Concat(output, "Groups: [", string.Join(", ", Groups), "], ");
            output = string.Concat(output, "LeaderboardRecords: [", string.Join(", ", LeaderboardRecords), "], ");
            output = string.Concat(output, "Messages: [", string.Join(", ", Messages), "], ");
            output = string.Concat(output, "Notifications: [", string.Join(", ", Notifications), "], ");
            output = string.Concat(output, "Objects: [", string.Join(", ", Objects), "], ");
            output = string.Concat(output, "WalletLedgers: [", string.Join(", ", WalletLedgers), "], ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more users.
    /// </summary>
    public interface INakamaapiUser
    {
        /// <summary>
        /// The User objects.
        /// </summary>
        IEnumerable<INakamaapiUser> Users { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class NakamaapiUser : INakamaapiUser
    {
        /// <inheritdoc />
        public IEnumerable<INakamaapiUser> Users => _users ?? new List<NakamaapiUser>(0);
        [DataMember(Name="users"), Preserve]

        public List<NakamaapiUser> _users { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Users: [", string.Join(", ", Users), "], ");
            return output;
        }
    }

    /// <summary>
    /// A list of users.
    /// </summary>
    public interface IConsoleAccountList
    {

        /// <summary>
        /// Next cursor.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// Approximate total number of users.
        /// </summary>
        int TotalCount { get; }

        /// <summary>
        /// A list of users.
        /// </summary>
        IEnumerable<INakamaapiUser> Users { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleAccountList : IConsoleAccountList
    {

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [DataMember(Name="total_count"), Preserve]
        public int TotalCount { get; set; }

        /// <inheritdoc />
        public IEnumerable<INakamaapiUser> Users => _users ?? new List<NakamaapiUser>(0);
        [DataMember(Name="users"), Preserve]
        public List<NakamaapiUser> _users { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "TotalCount: ", TotalCount, ", ");
            output = string.Concat(output, "Users: [", string.Join(", ", Users), "], ");
            return output;
        }
    }

    /// <summary>
    /// Add a new console user
    /// </summary>
    public interface IConsoleAddUserRequest
    {

        /// <summary>
        /// Email address of the user.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// Subscribe to newsletters
        /// </summary>
        bool NewsletterSubscription { get; }

        /// <summary>
        /// The password of the user.
        /// </summary>
        string Password { get; }

        /// <summary>
        /// Role of this user;
        /// </summary>
        ConsoleUserRole Role { get; }

        /// <summary>
        /// The username of the user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleAddUserRequest : IConsoleAddUserRequest
    {

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        /// <inheritdoc />
        [DataMember(Name="newsletter_subscription"), Preserve]
        public bool NewsletterSubscription { get; set; }

        /// <inheritdoc />
        [DataMember(Name="password"), Preserve]
        public string Password { get; set; }

        /// <inheritdoc />
        public ConsoleUserRole Role => _role;
        [DataMember(Name="role"), Preserve]
        public ConsoleUserRole _role { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "NewsletterSubscription: ", NewsletterSubscription, ", ");
            output = string.Concat(output, "Password: ", Password, ", ");
            output = string.Concat(output, "Role: ", Role, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// API Explorer List of Endpoints response message
    /// </summary>
    public interface IConsoleApiEndpointDescriptor
    {

        /// <summary>
        /// 
        /// </summary>
        string BodyTemplate { get; }

        /// <summary>
        /// 
        /// </summary>
        string Method { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleApiEndpointDescriptor : IConsoleApiEndpointDescriptor
    {

        /// <inheritdoc />
        [DataMember(Name="body_template"), Preserve]
        public string BodyTemplate { get; set; }

        /// <inheritdoc />
        [DataMember(Name="method"), Preserve]
        public string Method { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "BodyTemplate: ", BodyTemplate, ", ");
            output = string.Concat(output, "Method: ", Method, ", ");
            return output;
        }
    }

    /// <summary>
    /// API Explorer List of Endpoints
    /// </summary>
    public interface IConsoleApiEndpointList
    {

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IConsoleApiEndpointDescriptor> Endpoints { get; }

        /// <summary>
        /// 
        /// </summary>
        IEnumerable<IConsoleApiEndpointDescriptor> RpcEndpoints { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleApiEndpointList : IConsoleApiEndpointList
    {

        /// <inheritdoc />
        public IEnumerable<IConsoleApiEndpointDescriptor> Endpoints => _endpoints ?? new List<ConsoleApiEndpointDescriptor>(0);
        [DataMember(Name="endpoints"), Preserve]
        public List<ConsoleApiEndpointDescriptor> _endpoints { get; set; }

        /// <inheritdoc />
        public IEnumerable<IConsoleApiEndpointDescriptor> RpcEndpoints => _rpcEndpoints ?? new List<ConsoleApiEndpointDescriptor>(0);
        [DataMember(Name="rpc_endpoints"), Preserve]
        public List<ConsoleApiEndpointDescriptor> _rpcEndpoints { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Endpoints: [", string.Join(", ", Endpoints), "], ");
            output = string.Concat(output, "RpcEndpoints: [", string.Join(", ", RpcEndpoints), "], ");
            return output;
        }
    }

    /// <summary>
    /// Authenticate a console user with username and password.
    /// </summary>
    public interface IConsoleAuthenticateRequest
    {

        /// <summary>
        /// The password of the user.
        /// </summary>
        string Password { get; }

        /// <summary>
        /// The username of the user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleAuthenticateRequest : IConsoleAuthenticateRequest
    {

        /// <inheritdoc />
        [DataMember(Name="password"), Preserve]
        public string Password { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Password: ", Password, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// API Explorer request definition for CallApiEndpoint
    /// </summary>
    public interface IConsoleCallApiEndpointRequest
    {

        /// <summary>
        /// 
        /// </summary>
        string Body { get; }

        /// <summary>
        /// 
        /// </summary>
        string Method { get; }

        /// <summary>
        /// 
        /// </summary>
        string UserId { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleCallApiEndpointRequest : IConsoleCallApiEndpointRequest
    {

        /// <inheritdoc />
        [DataMember(Name="body"), Preserve]
        public string Body { get; set; }

        /// <inheritdoc />
        [DataMember(Name="method"), Preserve]
        public string Method { get; set; }

        /// <inheritdoc />
        [DataMember(Name="user_id"), Preserve]
        public string UserId { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Body: ", Body, ", ");
            output = string.Concat(output, "Method: ", Method, ", ");
            output = string.Concat(output, "UserId: ", UserId, ", ");
            return output;
        }
    }

    /// <summary>
    /// API Explorer response definition for CallApiEndpoint
    /// </summary>
    public interface IConsoleCallApiEndpointResponse
    {

        /// <summary>
        /// 
        /// </summary>
        string Body { get; }

        /// <summary>
        /// 
        /// </summary>
        string ErrorMessage { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleCallApiEndpointResponse : IConsoleCallApiEndpointResponse
    {

        /// <inheritdoc />
        [DataMember(Name="body"), Preserve]
        public string Body { get; set; }

        /// <inheritdoc />
        [DataMember(Name="error_message"), Preserve]
        public string ErrorMessage { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Body: ", Body, ", ");
            output = string.Concat(output, "ErrorMessage: ", ErrorMessage, ", ");
            return output;
        }
    }

    /// <summary>
    /// The current server configuration and any associated warnings.
    /// </summary>
    public interface IConsoleConfig
    {

        /// <summary>
        /// JSON-encoded active server configuration.
        /// </summary>
        string Config { get; }

        /// <summary>
        /// Server version
        /// </summary>
        string ServerVersion { get; }

        /// <summary>
        /// Any warnings about the current config.
        /// </summary>
        IEnumerable<IConfigWarning> Warnings { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleConfig : IConsoleConfig
    {

        /// <inheritdoc />
        [DataMember(Name="config"), Preserve]
        public string Config { get; set; }

        /// <inheritdoc />
        [DataMember(Name="server_version"), Preserve]
        public string ServerVersion { get; set; }

        /// <inheritdoc />
        public IEnumerable<IConfigWarning> Warnings => _warnings ?? new List<ConfigWarning>(0);
        [DataMember(Name="warnings"), Preserve]
        public List<ConfigWarning> _warnings { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Config: ", Config, ", ");
            output = string.Concat(output, "ServerVersion: ", ServerVersion, ", ");
            output = string.Concat(output, "Warnings: [", string.Join(", ", Warnings), "], ");
            return output;
        }
    }

    /// <summary>
    /// A console user session.
    /// </summary>
    public interface IConsoleConsoleSession
    {

        /// <summary>
        /// A session token (JWT) for the console user.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleConsoleSession : IConsoleConsoleSession
    {

        /// <inheritdoc />
        [DataMember(Name="token"), Preserve]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    public interface IRealtimeUserPresence
    {

    }

    public class RealtimeUserPresence : IRealtimeUserPresence
    {

    }

    /// <summary>
    /// Match state
    /// </summary>
    public interface IConsoleMatchState
    {
        /// <summary>
        /// Presence list.
        /// </summary>
        IEnumerable<IRealtimeUserPresence> Presences { get; }

        /// <summary>
        /// State.
        /// </summary>
        string State { get; }

        /// <summary>
        /// Current tick number.
        /// </summary>
        string Tick { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleMatchState : IConsoleMatchState
    {
        /// <inheritdoc />
        public IEnumerable<IRealtimeUserPresence> Presences => _presences ?? new List<RealtimeUserPresence>(0);
        [DataMember(Name="presences"), Preserve]
        public List<RealtimeUserPresence> _presences { get; set; }

        /// <inheritdoc />
        [DataMember(Name="state"), Preserve]
        public string State { get; set; }

        /// <inheritdoc />
        [DataMember(Name="tick"), Preserve]
        public string Tick { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Presences: [", string.Join(", ", Presences), "], ");
            output = string.Concat(output, "State: ", State, ", ");
            output = string.Concat(output, "Tick: ", Tick, ", ");
            return output;
        }
    }

    /// <summary>
    /// Runtime information
    /// </summary>
    public interface IConsoleRuntimeInfo
    {

        /// <summary>
        /// Go loaded modules
        /// </summary>
        IEnumerable<IRuntimeInfoModuleInfo> GoModules { get; }

        /// <summary>
        /// Go registered RPC functions
        /// </summary>
        List<string> GoRpcFunctions { get; }

        /// <summary>
        /// JavaScript loaded modules
        /// </summary>
        IEnumerable<IRuntimeInfoModuleInfo> JsModules { get; }

        /// <summary>
        /// JavaScript registered RPC functions
        /// </summary>
        List<string> JsRpcFunctions { get; }

        /// <summary>
        /// Lua loaded modules
        /// </summary>
        IEnumerable<IRuntimeInfoModuleInfo> LuaModules { get; }

        /// <summary>
        /// Lua registered RPC functions
        /// </summary>
        List<string> LuaRpcFunctions { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleRuntimeInfo : IConsoleRuntimeInfo
    {

        /// <inheritdoc />
        public IEnumerable<IRuntimeInfoModuleInfo> GoModules => _goModules ?? new List<RuntimeInfoModuleInfo>(0);
        [DataMember(Name="go_modules"), Preserve]
        public List<RuntimeInfoModuleInfo> _goModules { get; set; }

        /// <inheritdoc />
        [DataMember(Name="go_rpc_functions"), Preserve]
        public List<string> GoRpcFunctions { get; set; }

        /// <inheritdoc />
        public IEnumerable<IRuntimeInfoModuleInfo> JsModules => _jsModules ?? new List<RuntimeInfoModuleInfo>(0);
        [DataMember(Name="js_modules"), Preserve]
        public List<RuntimeInfoModuleInfo> _jsModules { get; set; }

        /// <inheritdoc />
        [DataMember(Name="js_rpc_functions"), Preserve]
        public List<string> JsRpcFunctions { get; set; }

        /// <inheritdoc />
        public IEnumerable<IRuntimeInfoModuleInfo> LuaModules => _luaModules ?? new List<RuntimeInfoModuleInfo>(0);
        [DataMember(Name="lua_modules"), Preserve]
        public List<RuntimeInfoModuleInfo> _luaModules { get; set; }

        /// <inheritdoc />
        [DataMember(Name="lua_rpc_functions"), Preserve]
        public List<string> LuaRpcFunctions { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "GoModules: [", string.Join(", ", GoModules), "], ");
            output = string.Concat(output, "GoRpcFunctions: [", string.Join(", ", GoRpcFunctions), "], ");
            output = string.Concat(output, "JsModules: [", string.Join(", ", JsModules), "], ");
            output = string.Concat(output, "JsRpcFunctions: [", string.Join(", ", JsRpcFunctions), "], ");
            output = string.Concat(output, "LuaModules: [", string.Join(", ", LuaModules), "], ");
            output = string.Concat(output, "LuaRpcFunctions: [", string.Join(", ", LuaRpcFunctions), "], ");
            return output;
        }
    }

    /// <summary>
    /// List of nodes and their stats.
    /// </summary>
    public interface IConsoleStatusList
    {

        /// <summary>
        /// List of nodes and their stats.
        /// </summary>
        IEnumerable<IConsoleStatusListStatus> Nodes { get; }

        /// <summary>
        /// Timestamp
        /// </summary>
        string Timestamp { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleStatusList : IConsoleStatusList
    {

        /// <inheritdoc />
        public IEnumerable<IConsoleStatusListStatus> Nodes => _nodes ?? new List<ConsoleStatusListStatus>(0);
        [DataMember(Name="nodes"), Preserve]
        public List<ConsoleStatusListStatus> _nodes { get; set; }

        /// <inheritdoc />
        [DataMember(Name="timestamp"), Preserve]
        public string Timestamp { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Nodes: [", string.Join(", ", Nodes), "], ");
            output = string.Concat(output, "Timestamp: ", Timestamp, ", ");
            return output;
        }
    }

    /// <summary>
    /// The status of a Nakama node.
    /// </summary>
    public interface IConsoleStatusListStatus
    {

        /// <summary>
        /// Average input bandwidth usage.
        /// </summary>
        double AvgInputKbs { get; }

        /// <summary>
        /// Average response latency in milliseconds.
        /// </summary>
        double AvgLatencyMs { get; }

        /// <summary>
        /// Average output bandwidth usage.
        /// </summary>
        double AvgOutputKbs { get; }

        /// <summary>
        /// Average number of requests per second.
        /// </summary>
        double AvgRateSec { get; }

        /// <summary>
        /// Current number of running goroutines.
        /// </summary>
        int GoroutineCount { get; }

        /// <summary>
        /// Health score.
        /// </summary>
        int Health { get; }

        /// <summary>
        /// Current number of active authoritative matches.
        /// </summary>
        int MatchCount { get; }

        /// <summary>
        /// Node name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Currently registered live presences.
        /// </summary>
        int PresenceCount { get; }

        /// <summary>
        /// Currently connected sessions.
        /// </summary>
        int SessionCount { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleStatusListStatus : IConsoleStatusListStatus
    {

        /// <inheritdoc />
        [DataMember(Name="avg_input_kbs"), Preserve]
        public double AvgInputKbs { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_latency_ms"), Preserve]
        public double AvgLatencyMs { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_output_kbs"), Preserve]
        public double AvgOutputKbs { get; set; }

        /// <inheritdoc />
        [DataMember(Name="avg_rate_sec"), Preserve]
        public double AvgRateSec { get; set; }

        /// <inheritdoc />
        [DataMember(Name="goroutine_count"), Preserve]
        public int GoroutineCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="health"), Preserve]
        public int Health { get; set; }

        /// <inheritdoc />
        [DataMember(Name="match_count"), Preserve]
        public int MatchCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="name"), Preserve]
        public string Name { get; set; }

        /// <inheritdoc />
        [DataMember(Name="presence_count"), Preserve]
        public int PresenceCount { get; set; }

        /// <inheritdoc />
        [DataMember(Name="session_count"), Preserve]
        public int SessionCount { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "AvgInputKbs: ", AvgInputKbs, ", ");
            output = string.Concat(output, "AvgLatencyMs: ", AvgLatencyMs, ", ");
            output = string.Concat(output, "AvgOutputKbs: ", AvgOutputKbs, ", ");
            output = string.Concat(output, "AvgRateSec: ", AvgRateSec, ", ");
            output = string.Concat(output, "GoroutineCount: ", GoroutineCount, ", ");
            output = string.Concat(output, "Health: ", Health, ", ");
            output = string.Concat(output, "MatchCount: ", MatchCount, ", ");
            output = string.Concat(output, "Name: ", Name, ", ");
            output = string.Concat(output, "PresenceCount: ", PresenceCount, ", ");
            output = string.Concat(output, "SessionCount: ", SessionCount, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public interface IConsoleStorageCollectionsList
    {

        /// <summary>
        /// Available collection names in the whole of the storage
        /// </summary>
        List<string> Collections { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleStorageCollectionsList : IConsoleStorageCollectionsList
    {

        /// <inheritdoc />
        [DataMember(Name="collections"), Preserve]
        public List<string> Collections { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Collections: [", string.Join(", ", Collections), "], ");
            return output;
        }
    }

    /// <summary>
    /// List of storage objects.
    /// </summary>
    public interface IConsoleStorageList
    {

        /// <summary>
        /// Next page cursor if any
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// List of storage objects matching list/filter operation.
        /// </summary>
        IEnumerable<IApiStorageObject> Objects { get; }

        /// <summary>
        /// Approximate total number of storage objects.
        /// </summary>
        int TotalCount { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleStorageList : IConsoleStorageList
    {

        /// <inheritdoc />
        [DataMember(Name="next_cursor"), Preserve]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        public IEnumerable<IApiStorageObject> Objects => _objects ?? new List<ApiStorageObject>(0);
        [DataMember(Name="objects"), Preserve]
        public List<ApiStorageObject> _objects { get; set; }

        /// <inheritdoc />
        [DataMember(Name="total_count"), Preserve]
        public int TotalCount { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output = string.Concat(output, "Objects: [", string.Join(", ", Objects), "], ");
            output = string.Concat(output, "TotalCount: ", TotalCount, ", ");
            return output;
        }
    }

    /// <summary>
    /// Unlink a particular device ID from a user's account.
    /// </summary>
    public interface IConsoleUnlinkDeviceRequest
    {

        /// <summary>
        /// Device ID to unlink.
        /// </summary>
        string DeviceId { get; }

        /// <summary>
        /// User ID to unlink from.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleUnlinkDeviceRequest : IConsoleUnlinkDeviceRequest
    {

        /// <inheritdoc />
        [DataMember(Name="device_id"), Preserve]
        public string DeviceId { get; set; }

        /// <inheritdoc />
        [DataMember(Name="id"), Preserve]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "DeviceId: ", DeviceId, ", ");
            output = string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of console users.
    /// </summary>
    public interface IConsoleUserList
    {

        /// <summary>
        /// A list of users.
        /// </summary>
        IEnumerable<IConsoleUserListUser> Users { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleUserList : IConsoleUserList
    {

        /// <inheritdoc />
        public IEnumerable<IConsoleUserListUser> Users => _users ?? new List<ConsoleUserListUser>(0);
        [DataMember(Name="users"), Preserve]
        public List<ConsoleUserListUser> _users { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Users: [", string.Join(", ", Users), "], ");
            return output;
        }
    }

    /// <summary>
    /// A console user
    /// </summary>
    public interface IConsoleUserListUser
    {

        /// <summary>
        /// Email of the user
        /// </summary>
        string Email { get; }

        /// <summary>
        /// Role of the user;
        /// </summary>
        ConsoleUserRole Role { get; }

        /// <summary>
        /// Username of the user
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    [DataContract]
    internal class ConsoleUserListUser : IConsoleUserListUser
    {

        /// <inheritdoc />
        [DataMember(Name="email"), Preserve]
        public string Email { get; set; }

        /// <inheritdoc />
        public ConsoleUserRole Role => _role;
        [DataMember(Name="role"), Preserve]
        public ConsoleUserRole _role { get; set; }

        /// <inheritdoc />
        [DataMember(Name="username"), Preserve]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output = string.Concat(output, "Email: ", Email, ", ");
            output = string.Concat(output, "Role: ", Role, ", ");
            output = string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public enum ConsoleUserRole
    {
        /// <summary>
        /// 
        /// </summary>
        USER_ROLE_UNKNOWN = 0
    }
}
